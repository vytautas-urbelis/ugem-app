map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    listen [::]:80;
    server_name ugem.app;
    return 301 https://ugem.app$request_uri;
    root /var/www/ugem/public;
}

server {
    listen 80;
    listen [::]:80;
    server_name www.ugem.app;
    return 301 https://ugem.app$request_uri;
    root /var/www/ugem/public;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.ugem.app;

    # IMPORTANT: To avoid browser SSL warnings, you must present
    # a valid certificate for "www.staging-develop.ugem.app".
    # Best is a SAN certificate that covers both:
    #   - staging-develop.ugem.app
    #   - www.staging-develop.ugem.app

    ssl_certificate /etc/letsencrypt/live/ugem.app/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ugem.app/privkey.pem;

    # The ONLY thing this block does is redirect https://www â†’ https://staging
    return 301 https://ugem.app$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ugem.app;

    ssl_certificate /etc/letsencrypt/live/ugem.app/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ugem.app/privkey.pem;

    location / {
        root /frontend_build;
        try_files $uri /index.html;
    }

    location /ws/ {
        proxy_pass http://backend:8000/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Timeouts
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }

    location /backend/ {
    #    add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since,access-control-allow-credentials,Access-Control-Allow-Origin';
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
    #    proxy_redirect off;
    #    client_body_temp_path /tmp 1 2;

        resolver 127.0.0.11;  # docker embedded DNS server
        set $target http://backend:8000;  # resolve during runtime rather than during startup
        proxy_pass $target;
    }

    location /static-files/ {
        alias /static-files/;
    }

    location /media-files/ {
        alias /media-files/;
    }

    location /robots.txt {
        alias /seo/robots.txt;
    }

    location /sitemap.xml {
        alias /seo/sitemap.xml;
    }

    location /.well-known/ {
        alias /well-known/;
    }

    # from https://cipherli.st/
    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options SAMEORIGIN;  # must not be on DENY to make iframe work!
    add_header X-Content-Type-Options nosniff;


}